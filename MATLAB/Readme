orthoclustN.m	MATLAB code that optimizes the cost function of OrthoClust for N species. It made use of an efficient code written by Mucha and Porter that implemented the Louvain algorithm for modularity optimization. Please download Mucha and Porter’s code via http://netwiki.amath.unc.edu/GenLouvain/GenLouvain (in the 3rd party code folder also), and store it in a folder in MATLAB path.
To run this the wrapper, one needs to store the networks and orthologous relationships in 2 cell arrays.
see help orthoclustN for details.
The new wrapper is a much more efficient than the earlier 2-species versions. We are currently packaging the code via other languages. Please let us know (koon-kiu.yan@yale.edu) if you find bugs or questions.

Example:
1. a simple toy model
load ./Data/simulated_nets;
figure;imagesc(A2);
figure;imagesc(A1);%these two networks consist of 4 modules
kappa=1.5;
A=cell(2,1);
A{1}=A1;
A{2}=A2;
O_pairs=cell(2,2);
O_pairs{1,2}=orthologs;
[assign,Q]=orthoclustN(A,O_pairs,kappa);
here Q is the modularity function, assign{1} and assign{2} store the module IDs of individual genes in Aw and Af respectively. for example
a1=assign{1};
a2=assign{2};
find(a1==4) are the genes in network 1 belong to module ID=4
find(a2==4) are the genes in network 2 belong to the same module ID=4
as a heuristic, it’s not necessary to repeat the Louvain algorithm multiple times. but to construct a heat map like the one in the manuscript, for example,
N=length(A1)+length(A2);
Zsum=zeros(N);
trial=10;
threshold=0.9;
for n=1:trial
    [assign Q]=orthoclustN(A,O_pairs,kappa);
    s=[assign{1}’ assign{2}’]’;
    Z=(squareform(pdist(s))==0);
    Zsum=Zsum+Z;
end
figure;imagesc(Zsum/trial>=f);
Zsum shows how often 2 nodes belong to the same module. for example, for node i is A1 and node j in A2, see
Zsum(i,length(A1)+j)
The simulated modules emerged by thresholding the matrix.

2. co-expression network for worm and fly
load ./Data/worm_fly_networks_info.mat;
kappa=3;
A=cell(2,1);
A{1}=Aw;
A{2}=Af;
O_pairs=cell(2,2);
O_pairs{1,2}=orthologs23;
[assign,Q]=orthoclustN(A,O_pairs,kappa);

3. for N networks
similar to the case N=2, see documentation in the code.
help orthoclustN



Earlier version:

orthoclust_2species.m	MATLAB code that optimizes the cost function of OrthoClust. It contains a function performing simulated annealing and an alternate function based on steepest descent. enter "help orthoclust_2species" in the matlab command line for details. 

./Data/worm_fly_networks_info.mat	contains the co-expression networks of worm, and fly and the list of worm-fly orthologs. all indexed by wormbase and flybase IDs
./Data/simulated_nets.mat contains two simulated networks, and their orthologs 
./3rd_party_code contains 3rd party code used

Example:
1. a simple toy model
load ./Data/simulated_nets;
figure;imagesc(A2);
figure;imagesc(A1);%these two networks consist of 4 modules
kappa=1.5;
N=length(A1)+length(A2);
Zsum=zeros(N);
f=0.3;
trial=10;
for n=1:10
    clusters=orthoclust_2species(A1,A2,orthologs,kappa,1);
    s=[clusters.species{1}' clusters.species{2}']';
    Z=(squareform(pdist(s))==0);
    Zsum=Zsum+Z;
end
%Zsum shows how often 2 nodes belong to the same module. The simulated modules emerged by thresholding the matrix.
figure;imagesc(Zsum/trial>=f)


2. co-expression networks for worm and fly
load ./Data/worm_fly_networks_info.mat;
kappa=3;
method=1;
clusters=orthoclust_2species(Aw,Af,orthologs23,kappa,method)

KKY: 10/15/2014

